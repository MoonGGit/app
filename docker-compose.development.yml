version: "3.3"

services:
  nginx:
    container_name: nginx
    restart: always
    image: nginx:1.20-alpine
    ports:
      - 80:80
      - 443:443
    env_file:
      - .env
    volumes:
      - myapp_socket:/tmp/myapp_socket:ro
      - ./nginx/index/:/etc/nginx/index
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - server_myapp
      - server_myapp_socket

  server_myapp:
    container_name: myapp
    restart: always
    build:
      dockerfile: ./server/dockerfile.development
      context: ./myapp
    env_file:
      - .env
    volumes:
      - ./myapp/server:/app/server
      - /app/server/.env # exclude
      - ./myapp/client/dist:/app/client/dist
      - myapp_socket:/tmp/myapp_socket
    links:
      - mysql:myapp_mysql
      - redis:myapp_redis
    depends_on:
      - mysql
      - redis

  # server_blog:

  # server_privateserver:

  redis:
    container_name: redis
    restart: always
    image: redis:alpine
    # command: redis-server --port 6379
    # hostname: redis_boot
    # labels:
    #     - "name=redis"
    #     - "mode=standalone"
    # ports:
    #     - 6379:6379

  mysql:
    container_name: mysql
    restart: always
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: "${mysql_password}"
      MYSQL_MYAPP_PASSWORD: "${myapp_password}"
    ports:
      - ${mysql_port1}:${mysql_port2}
    volumes:
      - ./shell/mysql/:/shell/
    cap_add:
      - SYS_NICE

  server_myapp_socket:
    restart: always
    build:
      dockerfile: dockerfile.development
      context: ./myapp/server_socket
    deploy:
      mode: replicated
      replicas: 2
      # update_config:
    # healthcheck:
    volumes:
      - ./myapp/server_socket:/app/server_socket
      - /app/server_socket/.env
volumes:
  myapp_socket:
